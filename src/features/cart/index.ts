import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { ComicItemCart } from '../../model/components/ComicItemCart';
import { RootState } from '../../store';

export interface CartState {
  items: {
    [key: string]: ComicItemCart;
  };
  currency: string;
}

const initialState: CartState = {
  items: {},
  currency: 'USD',
};

export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    addComicItemToCart: (state, action: PayloadAction<ComicItemCart>) => {
      const comicItem = action.payload;
      // Add the comic item to the cart items
      state.items[comicItem.id] = comicItem;
    },
    removeComicItemFromCart: (state, action: PayloadAction<string>) => {
      const id = action.payload;
      // Remove the comic item from the cart if it exists
      if (state.items[id]) {
        delete state.items[id];
      }
    },
  },
});

// Selector to get cart items from the state
export const selectCartItems = (state: RootState) => state.cart.items;

export const cartItemsCount = (state: RootState) => Object.keys(state.cart.items).length;

// Selector to get the total price of all items in the cart
export const selectTotalCartPrice = (state: RootState) =>
  Object.values(state.cart.items).reduce((total, item) => total + item.price.value, 0);

// Selector to get the cart currency
export const selectCartCurrency = (state: RootState) => state.cart.currency;

// Export the action creators generated by the slice
export const { addComicItemToCart, removeComicItemFromCart } = cartSlice.actions;

export default cartSlice.reducer;
