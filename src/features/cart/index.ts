import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { ComicItemCart } from '../../model/components/ComicItemCart';
import { RootState } from '../../store';

export interface CartState {
  items: {
    [key: string]: ComicItemCart;
  };
  currency: string;
}

const initialState: CartState = {
  items: {},
  currency: 'USD',
};

export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    addComicItemToCart: (state, action: PayloadAction<ComicItemCart>) => {
      const comicItem = action.payload;
      if (state.items[comicItem.id]) {
        state.items[comicItem.id].quantity += comicItem.quantity;
      } else {
        state.items[comicItem.id] = comicItem;
      }
    },
    removeComicItemFromCart: (state, action: PayloadAction<string>) => {
      const id = action.payload;
      if (state.items[id]) {
        delete state.items[id];
      }
    },
    changeComicItemQuantity: (
      state,
      action: PayloadAction<{ id: string; quantityToAdd: number }>,
    ) => {
      const { id, quantityToAdd } = action.payload;
      if (state.items[id]) {
        state.items[id].quantity += quantityToAdd;
      }
    },
  },
});

// Selectors
export const selectCartItems = (state: RootState) => state.cart.items;

export const cartItemsCount = (state: RootState) =>
  Object.values(state.cart.items).reduce((total, item) => total + item.quantity, 0);

export const cartItemsCountMenu = (state: RootState) =>
  cartItemsCount(state) > 9 ? '+9' : cartItemsCount(state).toString();

export const selectTotalCartPrice = (state: RootState) =>
  Object.values(state.cart.items).reduce(
    (total, item) => total + item.price.value * item.quantity,
    0,
  );

export const selectTotalCartPriceFormatted = (state: RootState) =>
  selectTotalCartPrice(state).toFixed(2);

export const selectCartCurrency = (state: RootState) => state.cart.currency;

// Export the action creators generated by the slice
export const { addComicItemToCart, removeComicItemFromCart, changeComicItemQuantity } =
  cartSlice.actions;

export default cartSlice.reducer;
